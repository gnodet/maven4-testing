name: Maven 4 Compatibility Testing

permissions:
  contents: read
  issues: write
  actions: write    # Needed to trigger workflows

on:
  workflow_dispatch:
    inputs:
      maven_version:
        description: 'Maven 4 version to use for building (required)'
        required: true
        default: '4.0.0-rc-3'
      maven_branch_or_commit:
        description: 'Maven branch or commit to build and test (leave empty to test the specified version directly)'
        required: false
        default: ''
      chunk_number:
        description: 'Chunk number to test (or ALL for all chunks)'
        required: true
        default: 'ALL'
      build_id:
        description: 'Build ID for tracking (auto-generated when chunk_number is ALL)'
        required: false
        default: ''

jobs:
  trigger-chunks:
    if: github.event.inputs.chunk_number == 'ALL'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Initialize summary page
        id: initialize-summary
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summaryData = JSON.parse(fs.readFileSync('maven4-chunks/summary.json', 'utf8'));
            const totalProjects = summaryData.total_repos;

            const mavenVersion = '${{ github.event.inputs.maven_version }}';
            const mavenBranchOrCommit = '${{ github.event.inputs.maven_branch_or_commit }}';
            const mavenIdentifier = mavenBranchOrCommit ? `${mavenBranchOrCommit} (built with ${mavenVersion})` : mavenVersion;
            const summaryTitle = `Maven Compatibility Summary (${mavenIdentifier})`;
            const startDate = new Date().toISOString();

            // Generate unique build ID for this workflow run
            const buildId = `build-${{ github.run_id }}-${Date.now()}`;
            console.log(`Generated build ID: ${buildId}`);

            // Check if summary already exists
            const summaryIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              labels: 'maven4-summary'
            });

            const existingSummary = summaryIssues.data.find(issue => issue.title === summaryTitle);

            const summaryBody =
              "# Maven Compatibility Testing Summary\n\n" +
              "Testing with Maven 3.x first, then Maven 4.x if 3.x succeeds\n" +
              "Maven 4.x version: " + mavenVersion + "\n" +
              (mavenBranchOrCommit ?
                "Building from branch/commit: " + mavenBranchOrCommit + "\n" : '') +
              "Started: " + startDate + "\n" +
              "Last updated: " + startDate + "\n" +
              "Build ID: " + buildId + "\n\n" +
              "## Summary Statistics\n\n" +
              `- **Total Projects**: ${totalProjects}\n` +
              `- **Tested Projects**: 0 (0.0%)\n` +
              `- **✅ Successful**: 0 (0.0%)\n` +
              `- **⚠️ Maven 3.x Failed**: 0 (0.0%)\n` +
              `- **❌ Maven 4.x Failed**: 0 (0.0%)\n\n` +
              "## Detailed Results\n\n" +
              "|Project|Status|Details|Error|\n" +
              "|---|---|---|---|\n" +
              "*Testing in progress...*";

            // Always update/create the summary to clear previous results
            if (existingSummary) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingSummary.number,
                body: summaryBody,
                state: 'open',
                labels: ['maven4-summary']
              });
              console.log(`Cleared and reset existing summary issue #${existingSummary.number} for new build`);
            } else {
              const newIssue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: summaryTitle,
                body: summaryBody,
                labels: ['maven4-summary']
              });
              console.log(`Created new summary issue #${newIssue.data.number}`);
            }

            // Store build ID for use in subsequent steps
            core.setOutput('build_id', buildId);

      - name: Trigger workflows for each chunk
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          NUM_CHUNKS=$(jq -r '.num_chunks' maven4-chunks/summary.json)
          BUILD_ID="${{ steps.initialize-summary.outputs.build_id }}"

          for i in $(seq 1 $NUM_CHUNKS); do
            echo "Triggering workflow for chunk $i with build ID: $BUILD_ID"
            gh workflow run test.yml \
              -f maven_version='${{ github.event.inputs.maven_version }}' \
              -f maven_branch_or_commit='${{ github.event.inputs.maven_branch_or_commit }}' \
              -f chunk_number=$i \
              -f build_id="$BUILD_ID"
          done

  build-maven:
    if: github.event.inputs.maven_branch_or_commit != '' && github.event.inputs.chunk_number != 'ALL'
    runs-on: ubuntu-latest
    outputs:
      maven_artifact_name: ${{ steps.build-info.outputs.maven_artifact_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build Maven from branch/commit
        id: build-info
        run: |
          mkdir -p ~/.m2

          # Download bootstrap Maven
          echo "Downloading bootstrap Maven version: ${{ github.event.inputs.maven_version }}"
          wget https://archive.apache.org/dist/maven/maven-4/${{ github.event.inputs.maven_version }}/binaries/apache-maven-${{ github.event.inputs.maven_version }}-bin.tar.gz \
            || wget https://dlcdn.apache.org/maven/maven-4/${{ github.event.inputs.maven_version }}/binaries/apache-maven-${{ github.event.inputs.maven_version }}-bin.tar.gz
          tar xzf apache-maven-${{ github.event.inputs.maven_version }}-bin.tar.gz

          BUILD_MAVEN_BIN="$GITHUB_WORKSPACE/apache-maven-${{ github.event.inputs.maven_version }}/bin"

          # Clone and build Maven from specified branch/commit
          echo "Building Maven from branch/commit: ${{ github.event.inputs.maven_branch_or_commit }}"
          git clone https://github.com/apache/maven.git maven-source
          cd maven-source
          git checkout ${{ github.event.inputs.maven_branch_or_commit }}

          # Build Maven without tests
          echo "Building Maven distribution using bootstrap Maven ${{ github.event.inputs.maven_version }}..."
          "$BUILD_MAVEN_BIN/mvn" clean package -DskipTests -Dmaven.test.skip=true

          # Find the built distribution
          MAVEN_DIST=$(find apache-maven/target -name "apache-maven-*-bin.tar.gz" | head -1)
          if [ -z "$MAVEN_DIST" ]; then
            echo "Error: Could not find Maven distribution in apache-maven/target/"
            exit 1
          fi

          echo "Found Maven distribution: $MAVEN_DIST"

          # Create artifact name based on branch/commit and timestamp
          ARTIFACT_NAME="maven-built-$(echo '${{ github.event.inputs.maven_branch_or_commit }}' | sed 's/[^a-zA-Z0-9-]/-/g')-$(date +%Y%m%d-%H%M%S)"
          echo "maven_artifact_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT

      - name: Upload built Maven distribution
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build-info.outputs.maven_artifact_name }}
          path: maven-source/apache-maven/target/apache-maven-*-bin.tar.gz
          retention-days: 1

  prepare-matrix:
    if: github.event.inputs.chunk_number != 'ALL'
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: set-matrix
        run: |
          echo "matrix=$(jq -c . "maven4-chunks/chunk-${{ github.event.inputs.chunk_number }}.json")" >> $GITHUB_OUTPUT

  test-maven4:
    needs: [build-maven, prepare-matrix]
    if: github.event.inputs.chunk_number != 'ALL' && always()
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: apache/${{ matrix.repository }}
          path: project

      - name: Detect required JDK version
        id: detect-jdk
        run: |
          # Default to JDK 17
          JDK_VERSION="17"

          # Function to check a POM file for JDK requirements
          check_pom_for_jdk() {
            local pom_file="$1"
            local current_jdk="$2"

            if [ ! -f "$pom_file" ]; then
              echo "$current_jdk"
              return
            fi

            echo "Checking $pom_file for JDK requirements..." >&2

            # Look for requireJavaVersion in enforcer plugin
            ENFORCER_JAVA=$(grep -A 30 "maven-enforcer-plugin" "$pom_file" | grep -A 10 "requireJavaVersion" | grep -oE '[0-9]+(\.[0-9]+)*' | sort -V | tail -1 || true)

            if [ -n "$ENFORCER_JAVA" ]; then
              echo "Found enforcer requireJavaVersion: $ENFORCER_JAVA" >&2
              if [ "$ENFORCER_JAVA" -ge "21" ]; then
                current_jdk="21"
              elif [ "$ENFORCER_JAVA" -ge "17" ]; then
                current_jdk="17"
              elif [ "$ENFORCER_JAVA" -ge "11" ]; then
                current_jdk="11"
              elif [ "$ENFORCER_JAVA" -ge "8" ]; then
                current_jdk="8"
              fi
            fi

            # Check maven.compiler.source/target properties
            COMPILER_SOURCE=$(grep -oE '<maven\.compiler\.source>[^<]+' "$pom_file" | grep -oE '[0-9]+' | tail -1 || true)
            COMPILER_TARGET=$(grep -oE '<maven\.compiler\.target>[^<]+' "$pom_file" | grep -oE '[0-9]+' | tail -1 || true)

            if [ -n "$COMPILER_SOURCE" ] && [ "$COMPILER_SOURCE" -gt "17" ]; then
              current_jdk="21"
              echo "Found maven.compiler.source=$COMPILER_SOURCE -> JDK $current_jdk" >&2
            elif [ -n "$COMPILER_TARGET" ] && [ "$COMPILER_TARGET" -gt "17" ]; then
              current_jdk="21"
              echo "Found maven.compiler.target=$COMPILER_TARGET -> JDK $current_jdk" >&2
            fi

            # Check for java.version property
            JAVA_VERSION_PROP=$(grep -oE '<java\.version>[^<]+' "$pom_file" | grep -oE '[0-9]+' | tail -1 || true)
            if [ -n "$JAVA_VERSION_PROP" ] && [ "$JAVA_VERSION_PROP" -gt "17" ]; then
              current_jdk="21"
              echo "Found java.version=$JAVA_VERSION_PROP -> JDK $current_jdk" >&2
            fi

            echo "$current_jdk"
          }

          # Function to download parent POM if needed
          download_parent_pom() {
            local pom_file="$1"

            # Extract parent information
            PARENT_GROUP=$(grep -A 5 "<parent>" "$pom_file" | grep "<groupId>" | sed 's/.*<groupId>\(.*\)<\/groupId>.*/\1/' || true)
            PARENT_ARTIFACT=$(grep -A 5 "<parent>" "$pom_file" | grep "<artifactId>" | sed 's/.*<artifactId>\(.*\)<\/artifactId>.*/\1/' || true)
            PARENT_VERSION=$(grep -A 5 "<parent>" "$pom_file" | grep "<version>" | sed 's/.*<version>\(.*\)<\/version>.*/\1/' || true)

            if [ -n "$PARENT_GROUP" ] && [ -n "$PARENT_ARTIFACT" ] && [ -n "$PARENT_VERSION" ]; then
              echo "Found parent: $PARENT_GROUP:$PARENT_ARTIFACT:$PARENT_VERSION" >&2

              # Try to download parent POM from Maven Central
              PARENT_URL="https://repo1.maven.org/maven2/$(echo $PARENT_GROUP | tr '.' '/')/$PARENT_ARTIFACT/$PARENT_VERSION/$PARENT_ARTIFACT-$PARENT_VERSION.pom"
              echo "Downloading parent POM from: $PARENT_URL" >&2

              if curl -s -f "$PARENT_URL" -o "parent-pom.xml"; then
                echo "Successfully downloaded parent POM" >&2
                return 0
              else
                echo "Failed to download parent POM" >&2
                return 1
              fi
            fi
            return 1
          }

          # Check project POM
          if [ -f "project/pom.xml" ]; then
            JDK_VERSION=$(check_pom_for_jdk "project/pom.xml" "$JDK_VERSION")

            # Try to download and check parent POM
            if download_parent_pom "project/pom.xml"; then
              JDK_VERSION=$(check_pom_for_jdk "parent-pom.xml" "$JDK_VERSION")
            fi
          fi

          echo "Final JDK version: $JDK_VERSION"
          echo "jdk-version=$JDK_VERSION" >> $GITHUB_OUTPUT

      - name: Set up JDK ${{ steps.detect-jdk.outputs.jdk-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ steps.detect-jdk.outputs.jdk-version }}
          distribution: 'temurin'

      - name: Download built Maven artifact
        if: github.event.inputs.maven_branch_or_commit != ''
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-maven.outputs.maven_artifact_name }}
          path: maven-artifacts

      - name: Setup Maven 4
        run: |
          mkdir -p ~/.m2

          if [ -n "${{ github.event.inputs.maven_branch_or_commit }}" ]; then
            echo "Using pre-built Maven from branch/commit: ${{ github.event.inputs.maven_branch_or_commit }}"

            # Extract the downloaded Maven distribution
            MAVEN_DIST=$(find maven-artifacts -name "apache-maven-*-bin.tar.gz" | head -1)
            if [ -z "$MAVEN_DIST" ]; then
              echo "Error: Could not find downloaded Maven distribution"
              exit 1
            fi

            echo "Found downloaded Maven distribution: $MAVEN_DIST"
            tar xzf "$MAVEN_DIST"

            # Get the extracted directory name and use the built Maven for testing
            MAVEN_DIR=$(tar -tzf "$MAVEN_DIST" | head -1 | cut -f1 -d"/")
            echo "M2_HOME=$GITHUB_WORKSPACE/$MAVEN_DIR" >> $GITHUB_ENV
            echo "$GITHUB_WORKSPACE/$MAVEN_DIR/bin" >> $GITHUB_PATH
            echo "MAVEN_DIST_DIR=$MAVEN_DIR" >> $GITHUB_ENV

          else
            echo "Using pre-built Maven version: ${{ github.event.inputs.maven_version }}"
            # Download and use the specified Maven version directly
            wget https://archive.apache.org/dist/maven/maven-4/${{ github.event.inputs.maven_version }}/binaries/apache-maven-${{ github.event.inputs.maven_version }}-bin.tar.gz \
              || wget https://dlcdn.apache.org/maven/maven-4/${{ github.event.inputs.maven_version }}/binaries/apache-maven-${{ github.event.inputs.maven_version }}-bin.tar.gz
            tar xzf apache-maven-${{ github.event.inputs.maven_version }}-bin.tar.gz
            echo "M2_HOME=$GITHUB_WORKSPACE/apache-maven-${{ github.event.inputs.maven_version }}" >> $GITHUB_ENV
            echo "$GITHUB_WORKSPACE/apache-maven-${{ github.event.inputs.maven_version }}/bin" >> $GITHUB_PATH
            echo "MAVEN_DIST_DIR=apache-maven-${{ github.event.inputs.maven_version }}" >> $GITHUB_ENV
          fi

          # Create minimal settings.xml to avoid snapshot resolution
          echo '<settings><profiles><profile><id>no-snapshots</id><repositories><repository><id>central</id><url>https://repo.maven.apache.org/maven2</url><snapshots><enabled>false</enabled></snapshots></repository></repositories></profile></profiles><activeProfiles><activeProfile>no-snapshots</activeProfile></activeProfiles></settings>' > ~/.m2/settings.xml

      - name: Check Build ID
        uses: actions/github-script@v7
        with:
          script: |
            // Early check to see if this build is still current
            const currentBuildId = '${{ github.event.inputs.build_id }}';
            const mavenVersion = '${{ github.event.inputs.maven_version }}';
            const mavenBranchOrCommit = '${{ github.event.inputs.maven_branch_or_commit }}';

            if (!currentBuildId) {
              console.log('No build ID provided - this might be a single chunk test, proceeding...');
              return;
            }

            const mavenIdentifier = mavenBranchOrCommit ? `${mavenBranchOrCommit} (built with ${mavenVersion})` : mavenVersion;
            const summaryTitle = `Maven Compatibility Summary (${mavenIdentifier})`;

            const summaryIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              labels: 'maven4-summary'
            });

            const existingSummary = summaryIssues.data.find(issue => issue.title === summaryTitle);

            if (existingSummary && existingSummary.body) {
              const buildIdMatch = existingSummary.body.match(/Build ID:\s*([^\n]+)/);
              const summaryBuildId = buildIdMatch ? buildIdMatch[1].trim() : null;

              if (summaryBuildId && summaryBuildId !== currentBuildId) {
                console.log(`Build ID mismatch detected - this build (${currentBuildId}) is outdated. Current build: ${summaryBuildId}`);
                console.log('Exiting job early to avoid processing projects unnecessarily.');
                process.exit(0); // Exit gracefully since this is expected behavior
              }
            }

            console.log(`Build ID check passed - proceeding with build ${currentBuildId}`);

      - name: Build and Report
        uses: actions/github-script@v7
        env:
          GITHUB_REPOSITORY_MATRIX: ${{ matrix.repository }}
          GITHUB_EVENT_INPUTS_MAVEN_VERSION: ${{ github.event.inputs.maven_version }}
          GITHUB_EVENT_INPUTS_MAVEN_BRANCH_OR_COMMIT: ${{ github.event.inputs.maven_branch_or_commit }}
          GITHUB_EVENT_INPUTS_CHUNK_NUMBER: ${{ github.event.inputs.chunk_number }}
          GITHUB_EVENT_INPUTS_BUILD_ID: ${{ github.event.inputs.build_id }}
        with:
          script: |
            const buildAndReport = require('./.github/scripts/build-and-report.js');
            await buildAndReport(github, context);