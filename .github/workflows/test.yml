name: Maven 4 Compatibility Testing

permissions:
  contents: read
  issues: write
  actions: write    # Needed to trigger workflows

on:
  workflow_dispatch:
    inputs:
      maven_version:
        description: 'Maven 4 version to test (leave empty if using branch/commit)'
        required: false
        default: '4.0.0-rc-3'
      maven_branch_or_commit:
        description: 'Maven branch or commit to build and test (leave empty if using version)'
        required: false
        default: ''
      chunk_number:
        description: 'Chunk number to test (or ALL for all chunks)'
        required: true
        default: 'ALL'

jobs:
  trigger-chunks:
    if: github.event.inputs.chunk_number == 'ALL'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Trigger workflows for each chunk
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          NUM_CHUNKS=$(jq -r '.num_chunks' maven4-chunks/summary.json)
          for i in $(seq 1 $NUM_CHUNKS); do
            echo "Triggering workflow for chunk $i"
            gh workflow run test.yml \
              -f maven_version='${{ github.event.inputs.maven_version }}' \
              -f maven_branch_or_commit='${{ github.event.inputs.maven_branch_or_commit }}' \
              -f chunk_number=$i
          done

  prepare-matrix:
    if: github.event.inputs.chunk_number != 'ALL'
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: set-matrix
        run: |
          echo "matrix=$(jq -c . "maven4-chunks/chunk-${{ github.event.inputs.chunk_number }}.json")" >> $GITHUB_OUTPUT

  test-maven4:
    needs: prepare-matrix
    if: github.event.inputs.chunk_number != 'ALL'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: apache/${{ matrix.repository }}
          path: project

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Maven 4
        run: |
          mkdir -p ~/.m2

          if [ -n "${{ github.event.inputs.maven_branch_or_commit }}" ]; then
            echo "Building Maven from branch/commit: ${{ github.event.inputs.maven_branch_or_commit }}"

            # Checkout Maven repository
            git clone https://github.com/apache/maven.git maven-source
            cd maven-source
            git checkout ${{ github.event.inputs.maven_branch_or_commit }}

            # Build Maven without tests
            echo "Building Maven distribution..."
            ./mvnw clean package -DskipTests -Dmaven.test.skip=true

            # Find and extract the built distribution
            MAVEN_DIST=$(find apache-maven/target -name "apache-maven-*-bin.tar.gz" | head -1)
            if [ -z "$MAVEN_DIST" ]; then
              echo "Error: Could not find Maven distribution in apache-maven/target/"
              exit 1
            fi

            echo "Found Maven distribution: $MAVEN_DIST"
            cd ..
            tar xzf maven-source/$MAVEN_DIST

            # Get the extracted directory name
            MAVEN_DIR=$(tar -tzf maven-source/$MAVEN_DIST | head -1 | cut -f1 -d"/")
            echo "M2_HOME=$GITHUB_WORKSPACE/$MAVEN_DIR" >> $GITHUB_ENV
            echo "$GITHUB_WORKSPACE/$MAVEN_DIR/bin" >> $GITHUB_PATH
            echo "MAVEN_DIST_DIR=$MAVEN_DIR" >> $GITHUB_ENV

          else
            echo "Using pre-built Maven version: ${{ github.event.inputs.maven_version }}"
            wget https://archive.apache.org/dist/maven/maven-4/${{ github.event.inputs.maven_version }}/binaries/apache-maven-${{ github.event.inputs.maven_version }}-bin.tar.gz \
              || wget https://dlcdn.apache.org/maven/maven-4/${{ github.event.inputs.maven_version }}/binaries/apache-maven-${{ github.event.inputs.maven_version }}-bin.tar.gz
            tar xzf apache-maven-${{ github.event.inputs.maven_version }}-bin.tar.gz
            echo "M2_HOME=$GITHUB_WORKSPACE/apache-maven-${{ github.event.inputs.maven_version }}" >> $GITHUB_ENV
            echo "$GITHUB_WORKSPACE/apache-maven-${{ github.event.inputs.maven_version }}/bin" >> $GITHUB_PATH
            echo "MAVEN_DIST_DIR=apache-maven-${{ github.event.inputs.maven_version }}" >> $GITHUB_ENV
          fi

          # Create minimal settings.xml to avoid snapshot resolution
          echo '<settings><profiles><profile><id>no-snapshots</id><repositories><repository><id>central</id><url>https://repo.maven.apache.org/maven2</url><snapshots><enabled>false</enabled></snapshots></repository></repositories></profile></profiles><activeProfiles><activeProfile>no-snapshots</activeProfile></activeProfiles></settings>' > ~/.m2/settings.xml

      - name: Build and Report
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');

            async function runMavenBuild() {
              let buildSuccess = false;
              let mavenOutput = '';
              let buildError = '';
              let mvnupOutput = '';

              try {
                execSync('mvn -version > maven_version.txt');
                const versionInfo = execSync('cat maven_version.txt').toString();

                // Check for and run mvnup apply if it exists
                const mavenDistDir = process.env.MAVEN_DIST_DIR || '';
                const mvnupPath = `${process.env.GITHUB_WORKSPACE}/${mavenDistDir}/bin/mvnup`;

                try {
                  execSync(`test -f "${mvnupPath}"`);
                  console.log('Found mvnup script, running mvnup apply...');
                  mvnupOutput = execSync(`"${mvnupPath}" apply 2>&1`, { encoding: 'utf8', cwd: process.cwd() + '/project' });
                  console.log('mvnup apply completed successfully');
                } catch (mvnupError) {
                  if (mvnupError.code === 1) {
                    // mvnup script doesn't exist
                    console.log('mvnup script not found, skipping...');
                    mvnupOutput = '';
                  } else {
                    // mvnup script exists but failed
                    console.log('mvnup apply failed:', mvnupError.message);
                    mvnupOutput = `mvnup apply failed:\n${mvnupError.stdout || mvnupError.message}`;
                  }
                }

                console.log('Running Maven build...');
                const buildOutput = execSync('mvn -V -B package -DskipTests 2>&1', { encoding: 'utf8', cwd: process.cwd() + '/project' });
                buildSuccess = true;
                mavenOutput = versionInfo;
                buildError = buildOutput;
              } catch (error) {
                buildSuccess = false;
                mavenOutput = execSync('cat maven_version.txt').toString();
                buildError = error.stdout || error.message;
              }

              return { buildSuccess, mavenOutput, buildError, mvnupOutput };
            }

            async function createOrUpdateIndividualProjectIssue(github, context, repo, buildSuccess, mavenOutput, buildError, mvnupOutput, mavenVersion, mavenBranchOrCommit, chunkNumber) {
              const status = buildSuccess ? '✅ Success' : '❌ Failed';
              const mavenIdentifier = mavenBranchOrCommit || mavenVersion;
              const issueTitle = `Maven 4 Test Results: ${repo} (${mavenIdentifier})`;

              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'all',
                labels: 'maven4-testing'
              });

              const maxLength = 60000;
              const truncatedLog = buildError.length > maxLength ? '...' + buildError.slice(-maxLength) : buildError;

              let body =
                "# Maven 4 Compatibility Test Report\n\n" +
                `- **Repository**: ${repo}\n` +
                `- **Status**: ${status}\n` +
                (mavenBranchOrCommit ?
                  `- **Maven Branch/Commit**: ${mavenBranchOrCommit}\n` :
                  `- **Maven Version**: ${mavenVersion}\n`) +
                `- **Test Date**: ${new Date().toISOString()}\n` +
                `- **Chunk**: ${chunkNumber}\n\n` +
                "<details>\n" +
                "<summary>Maven Version Info</summary>\n\n" +
                "```\n" +
                mavenOutput + "\n" +
                "```\n" +
                "</details>\n\n";

              // Add mvnup output section if available
              if (mvnupOutput && mvnupOutput.trim()) {
                body +=
                  "<details>\n" +
                  "<summary>mvnup apply Output</summary>\n\n" +
                  "```\n" +
                  mvnupOutput + "\n" +
                  "```\n" +
                  "</details>\n\n";
              }

              // Add build error details if build failed
              if (!buildSuccess) {
                body +=
                  "<details>\n" +
                  "<summary>Build Error Details</summary>\n\n" +
                  "```\n" +
                  truncatedLog + "\n" +
                  "```\n" +
                  "</details>\n";
              }

              const existingIssue = issues.data.find(issue => issue.title === issueTitle);
              let issueNumber;

              if (existingIssue) {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existingIssue.number,
                  body: body,
                  state: 'open',
                  labels: ['maven4-testing', buildSuccess ? 'success' : 'failed']
                });
                issueNumber = existingIssue.number;
              } else {
                const newIssue = await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: issueTitle,
                  body: body,
                  labels: ['maven4-testing', buildSuccess ? 'success' : 'failed']
                });
                issueNumber = newIssue.data.number;
              }

              return { issueNumber, status };
            }

            function extractFirstErrorLine(buildError) {
              const lines = buildError.split('\n');
              for (let i = lines.length - 1; i >= 0; i--) {
                const line = lines[i];
                if (line.startsWith('[ERROR]')) {
                  // Check the next line to ensure it's not another [ERROR]
                  if (i > 0 && !lines[i - 1].startsWith('[ERROR]')) {
                    return line;
                  } else if (i === 0) { // Handle the case where the last error line has no subsequent non-error line
                    return line;
                  }
                }
              }
              return 'No error details available';
            }

            async function updateSummaryTable(github, context, repo, status, issueNumber, buildError, mavenVersion, mavenBranchOrCommit) {
              const mavenIdentifier = mavenBranchOrCommit || mavenVersion;
              const summaryTitle = `Maven 4 Compatibility Summary (${mavenIdentifier})`;
              const summaryIssues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'all',
                labels: 'maven4-summary'
              });

              const existingSummary = summaryIssues.data.find(issue => issue.title === summaryTitle);
              const issueUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/issues/${issueNumber}`;

              // Process table update with first error line
              function processTableUpdate(currentBody, firstErrorLine) {
                const tableHeader = '|Project|Status|Details|Error|';
                const headerSeparator = '|---|---|---|---|';
                const newEntry = `|${repo}|${status}|[Details](${issueUrl})|${firstErrorLine}|`;

                // Split the body into lines
                const lines = currentBody.split('\n');

                // Find the table in the content
                const tableStartIndex = lines.findIndex(line => line.startsWith('|Project|'));
                if (tableStartIndex === -1) {
                  // If no table exists, create a new one
                  return `${tableHeader}\n${headerSeparator}\n${newEntry}`;
                }

                // Get existing table rows (excluding header and separator)
                const tableRows = lines
                  .slice(tableStartIndex + 2) // Skip header and separator
                  .filter(line => line.trim() && line.startsWith('|')) // Only keep non-empty table rows
                  .map(line => {
                    // Ensure all rows end with | if they don't already
                    return line.endsWith('|') ? line : line + '|';
                  });

                // Extract project name from the new entry
                const newProjectName = repo;

                // Filter out any existing entries for the same project
                const filteredRows = tableRows.filter(row => {
                  const projectName = row.split('|')[1].trim();
                  return projectName !== newProjectName;
                });

                // Add the new entry and sort all rows
                const allRows = [...filteredRows, newEntry];
                const sortedRows = allRows.sort((a, b) => {
                  const aProject = a.split('|')[1].trim();
                  const bProject = b.split('|')[1].trim();
                  return aProject.localeCompare(bProject);
                });

                // Reconstruct the table with header
                return `${tableHeader}\n${headerSeparator}\n${sortedRows.join('\n')}`;
              }

              const firstErrorLine = extractFirstErrorLine(buildError);
              const summaryBody =
                "# Maven 4 Compatibility Testing Summary\n\n" +
                (mavenBranchOrCommit ?
                  "Testing with Maven branch/commit: " + mavenBranchOrCommit + "\n" :
                  "Testing with Maven version: " + mavenVersion + "\n") +
                "Last updated: " + new Date().toISOString() + "\n\n" +
                (existingSummary ? processTableUpdate(existingSummary.body, firstErrorLine) :
                  '|Project|Status|Details|Error|\n|---|---|---|---|' + `\n|${repo}|${status}|[Details](${issueUrl})|${firstErrorLine}|`);

              const clientMutationId = `maven4-summary-${Date.now()}`;

              try {
                if (existingSummary) {
                  await github.graphql(`
                    mutation UpdateIssue($input: UpdateIssueInput!) {
                      updateIssue(input: $input) {
                        issue {
                          id
                        }
                        clientMutationId
                      }
                    }
                  `, {
                    input: {
                      id: existingSummary.node_id,
                      body: summaryBody,
                      clientMutationId: clientMutationId
                    }
                  });
                } else {
                  await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: summaryTitle,
                    body: summaryBody,
                    labels: ['maven4-summary']
                  });
                }
              } catch (error) {
                console.error('Error updating summary table:', error);
                throw error;
              }
            }

            (async () => {
              const { buildSuccess, mavenOutput, buildError, mvnupOutput } = await runMavenBuild();
              const repo = '${{ matrix.repository }}';
              const mavenVersion = '${{ github.event.inputs.maven_version }}';
              const mavenBranchOrCommit = '${{ github.event.inputs.maven_branch_or_commit }}';
              const chunkNumber = '${{ github.event.inputs.chunk_number }}';

              // Create/update individual project issue
              const { issueNumber, status } = await createOrUpdateIndividualProjectIssue(
                github, context, repo, buildSuccess, mavenOutput, buildError, mvnupOutput, mavenVersion, mavenBranchOrCommit, chunkNumber
              );

              // Update summary table
              await updateSummaryTable(github, context, repo, status, issueNumber, buildError, mavenVersion, mavenBranchOrCommit);
            })();