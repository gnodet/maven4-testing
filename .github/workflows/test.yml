name: Maven 4 Compatibility Testing

permissions:
  contents: read
  issues: write
  actions: write    # Needed to trigger workflows

on:
  workflow_dispatch:
    inputs:
      maven_version:
        description: 'Maven 4 version to use for building (required)'
        required: true
        default: '4.0.0-rc-3'
      maven_branch_or_commit:
        description: 'Maven branch or commit to build and test (leave empty to test the specified version directly)'
        required: false
        default: ''
      chunk_number:
        description: 'Chunk number to test (or ALL for all chunks)'
        required: true
        default: 'ALL'

jobs:
  trigger-chunks:
    if: github.event.inputs.chunk_number == 'ALL'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Initialize summary page
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summaryData = JSON.parse(fs.readFileSync('maven4-chunks/summary.json', 'utf8'));
            const totalProjects = summaryData.total_repos;

            const mavenVersion = '${{ github.event.inputs.maven_version }}';
            const mavenBranchOrCommit = '${{ github.event.inputs.maven_branch_or_commit }}';
            const mavenIdentifier = mavenBranchOrCommit ? `${mavenBranchOrCommit} (built with ${mavenVersion})` : mavenVersion;
            const summaryTitle = `Maven Compatibility Summary (${mavenIdentifier})`;
            const startDate = new Date().toISOString();

            // Check if summary already exists
            const summaryIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              labels: 'maven4-summary'
            });

            const existingSummary = summaryIssues.data.find(issue => issue.title === summaryTitle);

            const summaryBody =
              "# Maven Compatibility Testing Summary\n\n" +
              "Testing with Maven 3.x first, then Maven 4.x if 3.x succeeds\n" +
              "Maven 4.x version: " + mavenVersion + "\n" +
              (mavenBranchOrCommit ?
                "Building from branch/commit: " + mavenBranchOrCommit + "\n" : '') +
              "Started: " + startDate + "\n" +
              "Last updated: " + startDate + "\n\n" +
              "## Summary Statistics\n\n" +
              `- **Total Projects**: ${totalProjects}\n` +
              `- **Tested Projects**: 0 (0.0%)\n` +
              `- **✅ Successful**: 0 (0.0%)\n` +
              `- **⚠️ Maven 3.x Failed**: 0 (0.0%)\n` +
              `- **❌ Maven 4.x Failed**: 0 (0.0%)\n\n` +
              "## Detailed Results\n\n" +
              "|Project|Status|Details|Error|\n" +
              "|---|---|---|---|\n" +
              "*Testing in progress...*";

            // Always update/create the summary to clear previous results
            if (existingSummary) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingSummary.number,
                body: summaryBody,
                state: 'open',
                labels: ['maven4-summary']
              });
              console.log(`Cleared and reset existing summary issue #${existingSummary.number} for new build`);
            } else {
              const newIssue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: summaryTitle,
                body: summaryBody,
                labels: ['maven4-summary']
              });
              console.log(`Created new summary issue #${newIssue.data.number}`);
            }

      - name: Trigger workflows for each chunk
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          NUM_CHUNKS=$(jq -r '.num_chunks' maven4-chunks/summary.json)

          for i in $(seq 1 $NUM_CHUNKS); do
            echo "Triggering workflow for chunk $i"
            gh workflow run test.yml \
              -f maven_version='${{ github.event.inputs.maven_version }}' \
              -f maven_branch_or_commit='${{ github.event.inputs.maven_branch_or_commit }}' \
              -f chunk_number=$i
          done

  build-maven:
    if: github.event.inputs.maven_branch_or_commit != '' && github.event.inputs.chunk_number != 'ALL'
    runs-on: ubuntu-latest
    outputs:
      maven_artifact_name: ${{ steps.build-info.outputs.maven_artifact_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build Maven from branch/commit
        id: build-info
        run: |
          mkdir -p ~/.m2

          # Download bootstrap Maven
          echo "Downloading bootstrap Maven version: ${{ github.event.inputs.maven_version }}"
          wget https://archive.apache.org/dist/maven/maven-4/${{ github.event.inputs.maven_version }}/binaries/apache-maven-${{ github.event.inputs.maven_version }}-bin.tar.gz \
            || wget https://dlcdn.apache.org/maven/maven-4/${{ github.event.inputs.maven_version }}/binaries/apache-maven-${{ github.event.inputs.maven_version }}-bin.tar.gz
          tar xzf apache-maven-${{ github.event.inputs.maven_version }}-bin.tar.gz

          BUILD_MAVEN_BIN="$GITHUB_WORKSPACE/apache-maven-${{ github.event.inputs.maven_version }}/bin"

          # Clone and build Maven from specified branch/commit
          echo "Building Maven from branch/commit: ${{ github.event.inputs.maven_branch_or_commit }}"
          git clone https://github.com/apache/maven.git maven-source
          cd maven-source
          git checkout ${{ github.event.inputs.maven_branch_or_commit }}

          # Build Maven without tests
          echo "Building Maven distribution using bootstrap Maven ${{ github.event.inputs.maven_version }}..."
          "$BUILD_MAVEN_BIN/mvn" clean package -DskipTests -Dmaven.test.skip=true

          # Find the built distribution
          MAVEN_DIST=$(find apache-maven/target -name "apache-maven-*-bin.tar.gz" | head -1)
          if [ -z "$MAVEN_DIST" ]; then
            echo "Error: Could not find Maven distribution in apache-maven/target/"
            exit 1
          fi

          echo "Found Maven distribution: $MAVEN_DIST"

          # Create artifact name based on branch/commit and timestamp
          ARTIFACT_NAME="maven-built-$(echo '${{ github.event.inputs.maven_branch_or_commit }}' | sed 's/[^a-zA-Z0-9-]/-/g')-$(date +%Y%m%d-%H%M%S)"
          echo "maven_artifact_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT

      - name: Upload built Maven distribution
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build-info.outputs.maven_artifact_name }}
          path: maven-source/apache-maven/target/apache-maven-*-bin.tar.gz
          retention-days: 1

  prepare-matrix:
    if: github.event.inputs.chunk_number != 'ALL'
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: set-matrix
        run: |
          echo "matrix=$(jq -c . "maven4-chunks/chunk-${{ github.event.inputs.chunk_number }}.json")" >> $GITHUB_OUTPUT

  test-maven4:
    needs: [build-maven, prepare-matrix]
    if: github.event.inputs.chunk_number != 'ALL' && always()
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: apache/${{ matrix.repository }}
          path: project

      - name: Detect required JDK version
        id: detect-jdk
        run: |
          # Default to JDK 17
          JDK_VERSION="17"

          # Function to check a POM file for JDK requirements
          check_pom_for_jdk() {
            local pom_file="$1"
            local current_jdk="$2"

            if [ ! -f "$pom_file" ]; then
              echo "$current_jdk"
              return
            fi

            echo "Checking $pom_file for JDK requirements..." >&2

            # Look for requireJavaVersion in enforcer plugin
            ENFORCER_JAVA=$(grep -A 30 "maven-enforcer-plugin" "$pom_file" | grep -A 10 "requireJavaVersion" | grep -oE '[0-9]+(\.[0-9]+)*' | sort -V | tail -1 || true)

            if [ -n "$ENFORCER_JAVA" ]; then
              echo "Found enforcer requireJavaVersion: $ENFORCER_JAVA" >&2
              if [ "$ENFORCER_JAVA" -ge "21" ]; then
                current_jdk="21"
              elif [ "$ENFORCER_JAVA" -ge "17" ]; then
                current_jdk="17"
              elif [ "$ENFORCER_JAVA" -ge "11" ]; then
                current_jdk="11"
              elif [ "$ENFORCER_JAVA" -ge "8" ]; then
                current_jdk="8"
              fi
            fi

            # Check maven.compiler.source/target properties
            COMPILER_SOURCE=$(grep -oE '<maven\.compiler\.source>[^<]+' "$pom_file" | grep -oE '[0-9]+' | tail -1 || true)
            COMPILER_TARGET=$(grep -oE '<maven\.compiler\.target>[^<]+' "$pom_file" | grep -oE '[0-9]+' | tail -1 || true)

            if [ -n "$COMPILER_SOURCE" ] && [ "$COMPILER_SOURCE" -gt "17" ]; then
              current_jdk="21"
              echo "Found maven.compiler.source=$COMPILER_SOURCE -> JDK $current_jdk" >&2
            elif [ -n "$COMPILER_TARGET" ] && [ "$COMPILER_TARGET" -gt "17" ]; then
              current_jdk="21"
              echo "Found maven.compiler.target=$COMPILER_TARGET -> JDK $current_jdk" >&2
            fi

            # Check for java.version property
            JAVA_VERSION_PROP=$(grep -oE '<java\.version>[^<]+' "$pom_file" | grep -oE '[0-9]+' | tail -1 || true)
            if [ -n "$JAVA_VERSION_PROP" ] && [ "$JAVA_VERSION_PROP" -gt "17" ]; then
              current_jdk="21"
              echo "Found java.version=$JAVA_VERSION_PROP -> JDK $current_jdk" >&2
            fi

            echo "$current_jdk"
          }

          # Function to download parent POM if needed
          download_parent_pom() {
            local pom_file="$1"

            # Extract parent information
            PARENT_GROUP=$(grep -A 5 "<parent>" "$pom_file" | grep "<groupId>" | sed 's/.*<groupId>\(.*\)<\/groupId>.*/\1/' || true)
            PARENT_ARTIFACT=$(grep -A 5 "<parent>" "$pom_file" | grep "<artifactId>" | sed 's/.*<artifactId>\(.*\)<\/artifactId>.*/\1/' || true)
            PARENT_VERSION=$(grep -A 5 "<parent>" "$pom_file" | grep "<version>" | sed 's/.*<version>\(.*\)<\/version>.*/\1/' || true)

            if [ -n "$PARENT_GROUP" ] && [ -n "$PARENT_ARTIFACT" ] && [ -n "$PARENT_VERSION" ]; then
              echo "Found parent: $PARENT_GROUP:$PARENT_ARTIFACT:$PARENT_VERSION" >&2

              # Try to download parent POM from Maven Central
              PARENT_URL="https://repo1.maven.org/maven2/$(echo $PARENT_GROUP | tr '.' '/')/$PARENT_ARTIFACT/$PARENT_VERSION/$PARENT_ARTIFACT-$PARENT_VERSION.pom"
              echo "Downloading parent POM from: $PARENT_URL" >&2

              if curl -s -f "$PARENT_URL" -o "parent-pom.xml"; then
                echo "Successfully downloaded parent POM" >&2
                return 0
              else
                echo "Failed to download parent POM" >&2
                return 1
              fi
            fi
            return 1
          }

          # Check project POM
          if [ -f "project/pom.xml" ]; then
            JDK_VERSION=$(check_pom_for_jdk "project/pom.xml" "$JDK_VERSION")

            # Try to download and check parent POM
            if download_parent_pom "project/pom.xml"; then
              JDK_VERSION=$(check_pom_for_jdk "parent-pom.xml" "$JDK_VERSION")
            fi
          fi

          echo "Final JDK version: $JDK_VERSION"
          echo "jdk-version=$JDK_VERSION" >> $GITHUB_OUTPUT

      - name: Set up JDK ${{ steps.detect-jdk.outputs.jdk-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ steps.detect-jdk.outputs.jdk-version }}
          distribution: 'temurin'

      - name: Download built Maven artifact
        if: github.event.inputs.maven_branch_or_commit != ''
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-maven.outputs.maven_artifact_name }}
          path: maven-artifacts

      - name: Setup Maven 4
        run: |
          mkdir -p ~/.m2

          if [ -n "${{ github.event.inputs.maven_branch_or_commit }}" ]; then
            echo "Using pre-built Maven from branch/commit: ${{ github.event.inputs.maven_branch_or_commit }}"

            # Extract the downloaded Maven distribution
            MAVEN_DIST=$(find maven-artifacts -name "apache-maven-*-bin.tar.gz" | head -1)
            if [ -z "$MAVEN_DIST" ]; then
              echo "Error: Could not find downloaded Maven distribution"
              exit 1
            fi

            echo "Found downloaded Maven distribution: $MAVEN_DIST"
            tar xzf "$MAVEN_DIST"

            # Get the extracted directory name and use the built Maven for testing
            MAVEN_DIR=$(tar -tzf "$MAVEN_DIST" | head -1 | cut -f1 -d"/")
            echo "M2_HOME=$GITHUB_WORKSPACE/$MAVEN_DIR" >> $GITHUB_ENV
            echo "$GITHUB_WORKSPACE/$MAVEN_DIR/bin" >> $GITHUB_PATH
            echo "MAVEN_DIST_DIR=$MAVEN_DIR" >> $GITHUB_ENV

          else
            echo "Using pre-built Maven version: ${{ github.event.inputs.maven_version }}"
            # Download and use the specified Maven version directly
            wget https://archive.apache.org/dist/maven/maven-4/${{ github.event.inputs.maven_version }}/binaries/apache-maven-${{ github.event.inputs.maven_version }}-bin.tar.gz \
              || wget https://dlcdn.apache.org/maven/maven-4/${{ github.event.inputs.maven_version }}/binaries/apache-maven-${{ github.event.inputs.maven_version }}-bin.tar.gz
            tar xzf apache-maven-${{ github.event.inputs.maven_version }}-bin.tar.gz
            echo "M2_HOME=$GITHUB_WORKSPACE/apache-maven-${{ github.event.inputs.maven_version }}" >> $GITHUB_ENV
            echo "$GITHUB_WORKSPACE/apache-maven-${{ github.event.inputs.maven_version }}/bin" >> $GITHUB_PATH
            echo "MAVEN_DIST_DIR=apache-maven-${{ github.event.inputs.maven_version }}" >> $GITHUB_ENV
          fi

          # Create minimal settings.xml to avoid snapshot resolution
          echo '<settings><profiles><profile><id>no-snapshots</id><repositories><repository><id>central</id><url>https://repo.maven.apache.org/maven2</url><snapshots><enabled>false</enabled></snapshots></repository></repositories></profile></profiles><activeProfiles><activeProfile>no-snapshots</activeProfile></activeProfiles></settings>' > ~/.m2/settings.xml

      - name: Build and Report
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');

            async function runMaven3Build() {
              let maven3Success = false;
              let maven3Output = '';
              let maven3Error = '';

              try {
                console.log('Testing with Maven 3.x first...');

                // Check if project has Maven wrapper
                let maven3Command = 'mvn';
                try {
                  execSync('test -f project/mvnw');
                  console.log('Found Maven wrapper, checking version...');
                  const wrapperVersion = execSync('./mvnw -version 2>&1', { encoding: 'utf8', cwd: process.cwd() + '/project' });
                  if (wrapperVersion.includes('Apache Maven 3.')) {
                    console.log('Maven wrapper is configured for Maven 3.x, using it');
                    maven3Command = './mvnw';
                  } else {
                    console.log('Maven wrapper is not Maven 3.x, downloading Maven 3.9.9');
                    // Download Maven 3.9.9
                    execSync('wget -q https://archive.apache.org/dist/maven/maven-3/3.9.9/binaries/apache-maven-3.9.9-bin.tar.gz');
                    execSync('tar xzf apache-maven-3.9.9-bin.tar.gz');
                    maven3Command = `${process.env.GITHUB_WORKSPACE}/apache-maven-3.9.9/bin/mvn`;
                  }
                } catch (wrapperError) {
                  console.log('No Maven wrapper found, downloading Maven 3.9.9');
                  // Download Maven 3.9.9
                  execSync('wget -q https://archive.apache.org/dist/maven/maven-3/3.9.9/binaries/apache-maven-3.9.9-bin.tar.gz');
                  execSync('tar xzf apache-maven-3.9.9-bin.tar.gz');
                  maven3Command = `${process.env.GITHUB_WORKSPACE}/apache-maven-3.9.9/bin/mvn`;
                }

                const maven3VersionInfo = execSync(`${maven3Command} -version 2>&1`, { encoding: 'utf8', cwd: process.cwd() + '/project' });
                console.log('Running Maven 3.x build...');
                const maven3BuildOutput = execSync(`${maven3Command} -V -B package -DskipTests 2>&1`, { encoding: 'utf8', cwd: process.cwd() + '/project' });
                maven3Success = true;
                maven3Output = maven3VersionInfo;
                maven3Error = maven3BuildOutput;
              } catch (error) {
                maven3Success = false;
                maven3Output = 'Maven 3.x version info not available';
                maven3Error = error.stdout || error.message;
              }

              return { maven3Success, maven3Output, maven3Error };
            }

            async function runMaven4Build() {
              let buildSuccess = false;
              let mavenOutput = '';
              let buildError = '';
              let mvnupOutput = '';

              try {
                execSync('mvn -version > maven_version.txt');
                const versionInfo = execSync('cat maven_version.txt').toString();

                // Check for and run mvnup apply if it exists
                const mavenDistDir = process.env.MAVEN_DIST_DIR || '';
                const mvnupPath = `${process.env.GITHUB_WORKSPACE}/${mavenDistDir}/bin/mvnup`;

                try {
                  execSync(`test -f "${mvnupPath}"`);
                  console.log('Found mvnup script, running mvnup apply...');
                  mvnupOutput = execSync(`"${mvnupPath}" apply 2>&1`, { encoding: 'utf8', cwd: process.cwd() + '/project' });
                  console.log('mvnup apply completed successfully');
                } catch (mvnupError) {
                  if (mvnupError.code === 1) {
                    // mvnup script doesn't exist
                    console.log('mvnup script not found, skipping...');
                    mvnupOutput = '';
                  } else {
                    // mvnup script exists but failed
                    console.log('mvnup apply failed:', mvnupError.message);
                    mvnupOutput = `mvnup apply failed:\n${mvnupError.stdout || mvnupError.message}`;
                  }
                }

                console.log('Running Maven 4.x build...');
                const buildOutput = execSync('mvn -V -B package -DskipTests 2>&1', { encoding: 'utf8', cwd: process.cwd() + '/project' });
                buildSuccess = true;
                mavenOutput = versionInfo;
                buildError = buildOutput;
              } catch (error) {
                buildSuccess = false;
                mavenOutput = execSync('cat maven_version.txt').toString();
                buildError = error.stdout || error.message;
              }

              return { buildSuccess, mavenOutput, buildError, mvnupOutput };
            }

            async function createOrUpdateIndividualProjectIssue(github, context, repo, maven3Success, maven3Output, maven3Error, buildSuccess, mavenOutput, buildError, mvnupOutput, mavenVersion, mavenBranchOrCommit, chunkNumber) {
              // Determine overall status
              let overallStatus;
              if (!maven3Success) {
                overallStatus = '⚠️ Maven 3.x Failed';
              } else if (buildSuccess) {
                overallStatus = '✅ Success';
              } else {
                overallStatus = '❌ Maven 4.x Failed';
              }

              const mavenIdentifier = mavenBranchOrCommit ? `${mavenBranchOrCommit} (built with ${mavenVersion})` : mavenVersion;
              const issueTitle = `Maven 4 Test Results: ${repo} (${mavenIdentifier})`;

              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'all',
                labels: 'maven4-testing'
              });

              const maxLength = 30000; // Reduced to accommodate both Maven 3.x and 4.x logs
              const safeMaven3Error = maven3Error ? String(maven3Error) : '';
              const safeBuildError = buildError ? String(buildError) : '';
              const truncatedMaven3Log = safeMaven3Error.length > maxLength ? '...' + safeMaven3Error.slice(-maxLength) : safeMaven3Error;
              const truncatedMaven4Log = safeBuildError.length > maxLength ? '...' + safeBuildError.slice(-maxLength) : safeBuildError;

              // Get last commit info
              let lastCommitInfo = '';
              try {
                const commitSha = execSync('git rev-parse HEAD', { encoding: 'utf8', cwd: process.cwd() + '/project' }).trim();
                const commitDate = execSync('git log -1 --format=%ci', { encoding: 'utf8', cwd: process.cwd() + '/project' }).trim();
                const shortSha = commitSha.substring(0, 8);
                lastCommitInfo = `- **Last Commit**: ${shortSha} (${commitDate})\n`;
              } catch (error) {
                console.log('Could not retrieve commit info:', error.message);
                lastCommitInfo = '- **Last Commit**: Not available\n';
              }

              let body =
                "# Maven Compatibility Test Report\n\n" +
                `- **Repository**: [${repo}](https://github.com/apache/${repo})\n` +
                `- **Overall Status**: ${overallStatus}\n` +
                `- **Maven 3.x Status**: ${maven3Success ? '✅ Success' : '⚠️ Failed'}\n` +
                `- **Maven 4.x Status**: ${maven3Success ? (buildSuccess ? '✅ Success' : '❌ Failed') : '⏭️ Skipped (Maven 3.x failed)'}\n` +
                `- **Maven 4.x Version**: ${mavenVersion}\n` +
                (mavenBranchOrCommit ?
                  `- **Maven Branch/Commit**: ${mavenBranchOrCommit} (built with Maven ${mavenVersion})\n` : '') +
                lastCommitInfo +
                `- **Test Date**: ${new Date().toISOString()}\n` +
                `- **Chunk**: ${chunkNumber}\n\n`;

              // Add Maven 3.x results
              body +=
                "<details>\n" +
                "<summary>Maven 3.x Version Info</summary>\n\n" +
                "```\n" +
                maven3Output + "\n" +
                "```\n" +
                "</details>\n\n";

              if (!maven3Success) {
                body +=
                  "<details>\n" +
                  "<summary>Maven 3.x Build Error Details</summary>\n\n" +
                  "```\n" +
                  truncatedMaven3Log + "\n" +
                  "```\n" +
                  "</details>\n\n";
              }

              // Add Maven 4.x results only if Maven 3.x succeeded
              if (maven3Success) {
                body +=
                  "<details>\n" +
                  "<summary>Maven 4.x Version Info</summary>\n\n" +
                  "```\n" +
                  mavenOutput + "\n" +
                  "```\n" +
                  "</details>\n\n";

                // Add mvnup output section if available
                if (mvnupOutput && mvnupOutput.trim()) {
                  body +=
                    "<details>\n" +
                    "<summary>Maven Upgrade Output</summary>\n\n" +
                    "```\n" +
                    mvnupOutput + "\n" +
                    "```\n" +
                    "</details>\n\n";
                }

                // Add build error details if Maven 4.x build failed
                if (!buildSuccess) {
                  body +=
                    "<details>\n" +
                    "<summary>Maven 4.x Build Error Details</summary>\n\n" +
                    "```\n" +
                    truncatedMaven4Log + "\n" +
                    "```\n" +
                    "</details>\n";
                }
              }

              const existingIssue = issues.data.find(issue => issue.title === issueTitle);
              let issueNumber;

              // Determine labels based on results
              let labels = ['maven4-testing'];
              if (!maven3Success) {
                labels.push('maven3-failed');
              } else if (buildSuccess) {
                labels.push('success');
              } else {
                labels.push('maven4-failed');
              }

              if (existingIssue) {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existingIssue.number,
                  body: body,
                  state: 'open',
                  labels: labels
                });
                issueNumber = existingIssue.number;
              } else {
                const newIssue = await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: issueTitle,
                  body: body,
                  labels: labels
                });
                issueNumber = newIssue.data.number;
              }

              return { issueNumber, status: overallStatus };
            }

            function extractFirstErrorLine(buildError, buildSuccess, maven3Error, maven3Success) {
              // Ensure error variables are strings
              const safeMaven3Error = maven3Error ? String(maven3Error) : '';
              const safeBuildError = buildError ? String(buildError) : '';

              // If Maven 3.x failed, extract error from Maven 3.x
              if (!maven3Success) {
                if (!safeMaven3Error) {
                  return 'Maven 3.x: Build failed (no error details)';
                }
                const lines = safeMaven3Error.split('\n');
                for (let i = lines.length - 1; i >= 0; i--) {
                  const line = lines[i];
                  if (line.startsWith('[ERROR]')) {
                    // Check the next line to ensure it's not another [ERROR]
                    if (i > 0 && !lines[i - 1].startsWith('[ERROR]')) {
                      return `Maven 3.x: ${line}`;
                    } else if (i === 0) { // Handle the case where the last error line has no subsequent non-error line
                      return `Maven 3.x: ${line}`;
                    }
                  }
                }
                return 'Maven 3.x: Build failed';
              }

              // If Maven 3.x succeeded but Maven 4.x failed
              if (maven3Success && !buildSuccess) {
                if (!safeBuildError) {
                  return 'Maven 4.x: Build failed (no error details)';
                }
                const lines = safeBuildError.split('\n');
                for (let i = lines.length - 1; i >= 0; i--) {
                  const line = lines[i];
                  if (line.startsWith('[ERROR]')) {
                    // Check the next line to ensure it's not another [ERROR]
                    if (i > 0 && !lines[i - 1].startsWith('[ERROR]')) {
                      return `Maven 4.x: ${line}`;
                    } else if (i === 0) { // Handle the case where the last error line has no subsequent non-error line
                      return `Maven 4.x: ${line}`;
                    }
                  }
                }
                return 'Maven 4.x: Build failed';
              }

              // Both succeeded
              return '';
            }

            async function updateSummaryTable(github, context, repo, status, issueNumber, buildError, buildSuccess, maven3Error, maven3Success, mavenVersion, mavenBranchOrCommit) {
              const mavenIdentifier = mavenBranchOrCommit ? `${mavenBranchOrCommit} (built with ${mavenVersion})` : mavenVersion;
              const summaryTitle = `Maven Compatibility Summary (${mavenIdentifier})`;
              const summaryIssues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'all',
                labels: 'maven4-summary'
              });

              const existingSummary = summaryIssues.data.find(issue => issue.title === summaryTitle);
              const issueUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/issues/${issueNumber}`;

              // Process table update with first error line
              function processTableUpdate(currentBody, firstErrorLine) {
                const tableHeader = '|Project|Status|Details|Error|';
                const headerSeparator = '|---|---|---|---|';
                const newEntry = `|${repo}|${status}|[Details](${issueUrl})|${firstErrorLine}|`;

                // Handle null or undefined currentBody, or freshly cleared summary
                if (!currentBody) {
                  return `${tableHeader}\n${headerSeparator}\n${newEntry}`;
                }

                // Split the body into lines
                const lines = currentBody.split('\n');

                // Find the table in the content
                const tableStartIndex = lines.findIndex(line => line.startsWith('|Project|'));
                if (tableStartIndex === -1) {
                  // If no table exists, create a new one
                  return `${tableHeader}\n${headerSeparator}\n${newEntry}`;
                }

                // Get existing table rows (excluding header and separator)
                const tableRows = lines
                  .slice(tableStartIndex + 2) // Skip header and separator
                  .filter(line => line.trim() && line.startsWith('|')) // Only keep non-empty table rows
                  .map(line => {
                    // Ensure all rows end with | if they don't already
                    return line.endsWith('|') ? line : line + '|';
                  });

                // Extract project name from the new entry
                const newProjectName = repo;

                // Filter out any existing entries for the same project
                const filteredRows = tableRows.filter(row => {
                  const projectName = row.split('|')[1].trim();
                  return projectName !== newProjectName;
                });

                // Add the new entry and sort all rows
                const allRows = [...filteredRows, newEntry];
                const sortedRows = allRows.sort((a, b) => {
                  const aProject = a.split('|')[1].trim();
                  const bProject = b.split('|')[1].trim();
                  return aProject.localeCompare(bProject);
                });

                // Reconstruct the table with header
                return `${tableHeader}\n${headerSeparator}\n${sortedRows.join('\n')}`;
              }

              const firstErrorLine = extractFirstErrorLine(buildError, buildSuccess, maven3Error, maven3Success);

              // Extract total projects and start date from existing summary
              function extractSummaryInfo(existingBody) {
                if (!existingBody) {
                  return { totalProjects: 966, startDate: null }; // Default fallback
                }

                const totalMatch = existingBody.match(/\*\*Total Projects\*\*:\s*(\d+)/);
                const startMatch = existingBody.match(/Started:\s*([^\n]+)/);

                return {
                  totalProjects: totalMatch ? parseInt(totalMatch[1]) : 966,
                  startDate: startMatch ? startMatch[1] : null
                };
              }

              // Calculate statistics from the updated table
              function calculateStatistics(tableBody, totalProjects) {
                const lines = tableBody.split('\n');
                const tableStartIndex = lines.findIndex(line => line.startsWith('|Project|'));

                if (tableStartIndex === -1) {
                  // No table exists yet, this is the first entry
                  const success = status === '✅ Success' ? 1 : 0;
                  const maven3Failed = status === '⚠️ Maven 3.x Failed' ? 1 : 0;
                  const maven4Failed = status === '❌ Maven 4.x Failed' ? 1 : 0;
                  const tested = 1;

                  return {
                    total: totalProjects,
                    tested: tested,
                    success: success,
                    maven3Failed: maven3Failed,
                    maven4Failed: maven4Failed,
                    testedRatio: (tested / totalProjects * 100).toFixed(1),
                    successRatio: tested > 0 ? (success / tested * 100).toFixed(1) : '0.0',
                    maven3FailedRatio: tested > 0 ? (maven3Failed / tested * 100).toFixed(1) : '0.0',
                    maven4FailedRatio: tested > 0 ? (maven4Failed / tested * 100).toFixed(1) : '0.0'
                  };
                }

                // Get existing table rows (excluding header and separator)
                const tableRows = lines
                  .slice(tableStartIndex + 2) // Skip header and separator
                  .filter(line => line.trim() && line.startsWith('|') && !line.includes('*Testing in progress*')) // Only keep non-empty table rows, exclude progress message
                  .map(line => line.endsWith('|') ? line : line + '|');

                let success = 0;
                let maven3Failed = 0;
                let maven4Failed = 0;

                tableRows.forEach(row => {
                  const columns = row.split('|');
                  if (columns.length >= 3) {
                    const rowStatus = columns[2].trim();
                    if (rowStatus === '✅ Success') {
                      success++;
                    } else if (rowStatus === '⚠️ Maven 3.x Failed') {
                      maven3Failed++;
                    } else if (rowStatus === '❌ Maven 4.x Failed') {
                      maven4Failed++;
                    }
                  }
                });

                const tested = success + maven3Failed + maven4Failed;

                return {
                  total: totalProjects,
                  tested: tested,
                  success: success,
                  maven3Failed: maven3Failed,
                  maven4Failed: maven4Failed,
                  testedRatio: (tested / totalProjects * 100).toFixed(1),
                  successRatio: tested > 0 ? (success / tested * 100).toFixed(1) : '0.0',
                  maven3FailedRatio: tested > 0 ? (maven3Failed / tested * 100).toFixed(1) : '0.0',
                  maven4FailedRatio: tested > 0 ? (maven4Failed / tested * 100).toFixed(1) : '0.0'
                };
              }

              const updatedTable = existingSummary ? processTableUpdate(existingSummary.body, firstErrorLine) :
                '|Project|Status|Details|Error|\n|---|---|---|---|' + `\n|${repo}|${status}|[Details](${issueUrl})|${firstErrorLine}|`;

              const summaryInfo = extractSummaryInfo(existingSummary ? existingSummary.body : null);
              const stats = calculateStatistics(updatedTable, summaryInfo.totalProjects);

              const summaryBody =
                "# Maven Compatibility Testing Summary\n\n" +
                "Testing with Maven 3.x first, then Maven 4.x if 3.x succeeds\n" +
                "Maven 4.x version: " + mavenVersion + "\n" +
                (mavenBranchOrCommit ?
                  "Building from branch/commit: " + mavenBranchOrCommit + "\n" : '') +
                (summaryInfo.startDate ? "Started: " + summaryInfo.startDate + "\n" : '') +
                "Last updated: " + new Date().toISOString() + "\n\n" +
                "## Summary Statistics\n\n" +
                `- **Total Projects**: ${stats.total}\n` +
                `- **Tested Projects**: ${stats.tested} (${stats.testedRatio}%)\n` +
                `- **✅ Successful**: ${stats.success} (${stats.successRatio}%)\n` +
                `- **⚠️ Maven 3.x Failed**: ${stats.maven3Failed} (${stats.maven3FailedRatio}%)\n` +
                `- **❌ Maven 4.x Failed**: ${stats.maven4Failed} (${stats.maven4FailedRatio}%)\n\n` +
                "## Detailed Results\n\n" +
                updatedTable;

              const clientMutationId = `maven4-summary-${Date.now()}`;

              try {
                if (existingSummary) {
                  await github.graphql(`
                    mutation UpdateIssue($input: UpdateIssueInput!) {
                      updateIssue(input: $input) {
                        issue {
                          id
                        }
                        clientMutationId
                      }
                    }
                  `, {
                    input: {
                      id: existingSummary.node_id,
                      body: summaryBody,
                      clientMutationId: clientMutationId
                    }
                  });
                } else {
                  await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: summaryTitle,
                    body: summaryBody,
                    labels: ['maven4-summary']
                  });
                }
              } catch (error) {
                console.error('Error updating summary table:', error);
                throw error;
              }
            }

            (async () => {
              // First, run Maven 3.x build
              const { maven3Success, maven3Output, maven3Error } = await runMaven3Build();

              let buildSuccess = false;
              let mavenOutput = '';
              let buildError = '';
              let mvnupOutput = '';

              // Only run Maven 4.x if Maven 3.x succeeded
              if (maven3Success) {
                console.log('Maven 3.x build succeeded, proceeding with Maven 4.x...');
                const maven4Results = await runMaven4Build();
                buildSuccess = maven4Results.buildSuccess;
                mavenOutput = maven4Results.mavenOutput;
                buildError = maven4Results.buildError;
                mvnupOutput = maven4Results.mvnupOutput;
              } else {
                console.log('Maven 3.x build failed, skipping Maven 4.x build');
              }

              const repo = '${{ matrix.repository }}';
              const mavenVersion = '${{ github.event.inputs.maven_version }}';
              const mavenBranchOrCommit = '${{ github.event.inputs.maven_branch_or_commit }}';
              const chunkNumber = '${{ github.event.inputs.chunk_number }}';

              // Create/update individual project issue
              const { issueNumber, status } = await createOrUpdateIndividualProjectIssue(
                github, context, repo, maven3Success, maven3Output, maven3Error, buildSuccess, mavenOutput, buildError, mvnupOutput, mavenVersion, mavenBranchOrCommit, chunkNumber
              );

              // Add delay to prevent GitHub rate limiting (2.5 seconds)
              console.log('Adding delay to prevent rate limiting...');
              await new Promise(resolve => setTimeout(resolve, 2500));

              // Update summary table
              await updateSummaryTable(github, context, repo, status, issueNumber, buildError, buildSuccess, maven3Error, maven3Success, mavenVersion, mavenBranchOrCommit);
            })();