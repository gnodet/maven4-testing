name: Maven 4 Compatibility Testing

permissions:
  contents: read
  issues: write    # Add this to allow creating issues

on:
  workflow_dispatch:
    inputs:
      maven_version:
        description: 'Maven 4 version to test'
        required: true
        default: '4.0.0-rc-1'
      chunk_number:
        description: 'Chunk number to test (or ALL for all chunks)'
        required: true
        default: 'ALL'

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Load chunk configuration
        id: set-matrix
        run: |
          if [[ "${{ github.event.inputs.chunk_number }}" == "ALL" ]]; then
            echo "matrix=$(jq -c . maven4-chunks/summary.json)" >> $GITHUB_OUTPUT
          else
            echo "matrix=$(jq -c . "maven4-chunks/chunk-${{ github.event.inputs.chunk_number }}.json")" >> $GITHUB_OUTPUT
          fi

  test-maven4:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix: ${{fromJson(needs.prepare.outputs.matrix)}}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: apache/${{ matrix.repository }}
          
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Download and Install Maven 4
        run: |
          mkdir -p ~/.m2
          wget https://archive.apache.org/dist/maven/maven-4/${{ github.event.inputs.maven_version }}/binaries/apache-maven-${{ github.event.inputs.maven_version }}-bin.tar.gz \
            || wget https://dlcdn.apache.org/maven/maven-4/${{ github.event.inputs.maven_version }}/binaries/apache-maven-${{ github.event.inputs.maven_version }}-bin.tar.gz
          tar xzf apache-maven-${{ github.event.inputs.maven_version }}-bin.tar.gz
          echo "M2_HOME=$GITHUB_WORKSPACE/apache-maven-${{ github.event.inputs.maven_version }}" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/apache-maven-${{ github.event.inputs.maven_version }}/bin" >> $GITHUB_PATH
          # Create minimal settings.xml to avoid snapshot resolution
          echo '<settings><profiles><profile><id>no-snapshots</id><repositories><repository><id>central</id><url>https://repo.maven.apache.org/maven2</url><snapshots><enabled>false</enabled></snapshots></repository></repositories></profile></profiles><activeProfiles><activeProfile>no-snapshots</activeProfile></activeProfiles></settings>' > ~/.m2/settings.xml

      - name: Build and Report
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');
            
            // Run Maven build and capture output
            let buildSuccess = false;
            let mavenOutput = '';
            let buildError = '';
            
            try {
              execSync('mvn -version > maven_version.txt');
              const versionInfo = execSync('cat maven_version.txt').toString();
              
              console.log('Running Maven build...');
              const buildOutput = execSync('mvn -V -B clean package -DskipTests 2>&1', { encoding: 'utf8' });
              buildSuccess = true;
              mavenOutput = versionInfo;
              buildError = buildOutput; // Store full output in case we need it
            } catch (error) {
              buildSuccess = false;
              mavenOutput = execSync('cat maven_version.txt').toString();
              buildError = error.stdout || error.message;

              // Extract error section from the output
              const lines = buildError.split('\n');
              const errorLines = [];
              let inErrorSection = false;
              
              for (let i = lines.length - 1; i >= 0; i--) {
                const line = lines[i];
                if (line.includes('[ERROR]')) {
                  inErrorSection = true;
                  errorLines.unshift(line);
                } else if (inErrorSection && line.trim() === '') {
                  inErrorSection = false;
                } else if (inErrorSection) {
                  errorLines.unshift(line);
                }
              }
              
              buildError = errorLines.join('\n') || 'Build failed without error output';
            }
            
            console.log('Build success:', buildSuccess);
            
            const status = buildSuccess ? '✅ Success' : '❌ Failed';
            const repo = '${{ matrix.repository }}';
            const mavenVersion = '${{ github.event.inputs.maven_version }}';
            const issueTitle = `Maven 4 Test Results: ${repo} (${mavenVersion})`;
            
            // Create/update individual project issue first to get its number
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              labels: 'maven4-testing'
            });
            
            const existingIssue = issues.data.find(issue => issue.title === issueTitle);
            let issueNumber;
            
            const body = 
              "# Maven 4 Compatibility Test Report\n\n" +
              `- **Repository**: ${repo}\n` +
              `- **Status**: ${status}\n` +
              `- **Maven Version**: ${mavenVersion}\n` +
              `- **Test Date**: ${new Date().toISOString()}\n` +
              `- **Chunk**: ${github.event.inputs.chunk_number}\n\n` +
              "<details>\n" +
              "<summary>Maven Version Info</summary>\n\n" +
              "```\n" +
              mavenOutput + "\n" +
              "```\n" +
              "</details>\n\n" +
              (!buildSuccess ? 
                "<details>\n" +
                "<summary>Build Error Details</summary>\n\n" +
                "```\n" +
                buildError + "\n" +
                "```\n" +
                "</details>\n" 
                : "");

            if (existingIssue) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: body,
                state: 'open',
                labels: ['maven4-testing', buildSuccess ? 'success' : 'failed']
              });
              issueNumber = existingIssue.number;
            } else {
              const newIssue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: body,
                labels: ['maven4-testing', buildSuccess ? 'success' : 'failed']
              });
              issueNumber = newIssue.data.number;
            }
            
            // Update summary table with retries for concurrent modifications
            const summaryTitle = `Maven 4 Compatibility Summary (${mavenVersion})`;
            async function updateSummaryTable(retryCount = 0) {
              if (retryCount > 5) {
                console.log('Failed to update summary table after 5 retries');
                return;
              }
              
              try {
                const summaryIssues = await github.rest.issues.listForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'all',
                  labels: 'maven4-summary'
                });
                
                const existingSummary = summaryIssues.data.find(issue => issue.title === summaryTitle);
                let currentTable = '';
                
                if (existingSummary) {
                  // Parse existing table
                  const tableLines = existingSummary.body.split('\n');
                  let tableStart = -1;
                  let tableEnd = -1;
                  
                  for (let i = 0; i < tableLines.length; i++) {
                    if (tableLines[i].startsWith('|Project|')) {
                      tableStart = i;
                    } else if (tableStart !== -1 && tableLines[i].trim() === '') {
                      tableEnd = i;
                      break;
                    }
                  }
                  
                  if (tableStart !== -1) {
                    currentTable = tableLines.slice(tableStart, tableEnd).join('\n');
                  }
                }
                
                // Create or update table entry
                const issueUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/issues/${issueNumber}`;
                const entry = `|${repo}|${status}|[Details](${issueUrl})|`;
                const tableHeader = '|Project|Status|Details|\n|---|---|---|';
                
                let newTable;
                if (!currentTable) {
                  newTable = tableHeader + '\n' + entry;
                } else {
                  const rows = currentTable.split('\n').slice(2); // Skip header rows
                  const updatedRows = rows.filter(row => !row.startsWith(`|${repo}|`));
                  newTable = tableHeader + '\n' + updatedRows.join('\n') + '\n' + entry;
                }
                
                const summaryBody = 
                  "# Maven 4 Compatibility Testing Summary\n\n" +
                  "Testing with Maven version: " + mavenVersion + "\n" +
                  "Last updated: " + new Date().toISOString() + "\n\n" +
                  newTable;
                  
                if (existingSummary) {
                  await github.rest.issues.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: existingSummary.number,
                    body: summaryBody,
                    state: 'open',
                    labels: ['maven4-summary']
                  });
                } else {
                  await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: summaryTitle,
                    body: summaryBody,
                    labels: ['maven4-summary']
                  });
                }
              } catch (error) {
                if (error.status === 422) {
                  // Concurrent modification detected, retry
                  console.log('Concurrent modification detected, retrying...');
                  await new Promise(resolve => setTimeout(resolve, 1000 * (retryCount + 1)));
                  return updateSummaryTable(retryCount + 1);
                }
                throw error;
              }
            }
            
            await updateSummaryTable();