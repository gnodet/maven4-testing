name: Maven 4 Compatibility Testing

permissions:
  contents: read
  issues: write    # Add this to allow creating issues

on:
  workflow_dispatch:
    inputs:
      maven_version:
        description: 'Maven 4 version to test'
        required: true
        default: '4.0.0-rc-1'
      chunk_number:
        description: 'Chunk number to test (or ALL for all chunks)'
        required: true
        default: 'ALL'

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Load chunk configuration
        id: set-matrix
        run: |
          if [[ "${{ github.event.inputs.chunk_number }}" == "ALL" ]]; then
            echo "matrix=$(jq -c . maven4-chunks/summary.json)" >> $GITHUB_OUTPUT
          else
            echo "matrix=$(jq -c . "maven4-chunks/chunk-${{ github.event.inputs.chunk_number }}.json")" >> $GITHUB_OUTPUT
          fi

  test-maven4:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix: ${{fromJson(needs.prepare.outputs.matrix)}}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: apache/${{ matrix.repository }}
          
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Download and Install Maven 4
        run: |
          mkdir -p ~/.m2
          wget https://archive.apache.org/dist/maven/maven-4/${{ github.event.inputs.maven_version }}/binaries/apache-maven-${{ github.event.inputs.maven_version }}-bin.tar.gz \
            || wget https://dlcdn.apache.org/maven/maven-4/${{ github.event.inputs.maven_version }}/binaries/apache-maven-${{ github.event.inputs.maven_version }}-bin.tar.gz
          tar xzf apache-maven-${{ github.event.inputs.maven_version }}-bin.tar.gz
          echo "M2_HOME=$GITHUB_WORKSPACE/apache-maven-${{ github.event.inputs.maven_version }}" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/apache-maven-${{ github.event.inputs.maven_version }}/bin" >> $GITHUB_PATH
          # Create minimal settings.xml to avoid snapshot resolution
          echo '<settings><profiles><profile><id>no-snapshots</id><repositories><repository><id>central</id><url>https://repo.maven.apache.org/maven2</url><snapshots><enabled>false</enabled></snapshots></repository></repositories></profile></profiles><activeProfiles><activeProfile>no-snapshots</activeProfile></activeProfiles></settings>' > ~/.m2/settings.xml

      - name: Build and Report
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');

            async function runMavenBuild() {
              let buildSuccess = false;
              let mavenOutput = '';
              let buildError = '';

              try {
                execSync('mvn -version > maven_version.txt');
                const versionInfo = execSync('cat maven_version.txt').toString();
                
                console.log('Running Maven build...');
                const buildOutput = execSync('mvn -V -B clean package -DskipTests 2>&1', { encoding: 'utf8' });
                buildSuccess = true;
                mavenOutput = versionInfo;
                buildError = buildOutput;
              } catch (error) {
                buildSuccess = false;
                mavenOutput = execSync('cat maven_version.txt').toString();
                buildError = error.stdout || error.message;

                // Extract error section from the output
                const lines = buildError.split('\n');
                const errorLines = [];
                let inErrorSection = false;
                
                for (let i = lines.length - 1; i >= 0; i--) {
                  const line = lines[i];
                  if (line.includes('[ERROR]')) {
                    inErrorSection = true;
                    errorLines.unshift(line);
                  } else if (inErrorSection && line.trim() === '') {
                    inErrorSection = false;
                  } else if (inErrorSection) {
                    errorLines.unshift(line);
                  }
                }
                
                buildError = errorLines.join('\n') || 'Build failed without error output';
              }

              return { buildSuccess, mavenOutput, buildError };
            }

            async function createOrUpdateIndividualProjectIssue(github, context, repo, buildSuccess, mavenOutput, buildError, mavenVersion, chunkNumber) {
              const status = buildSuccess ? '✅ Success' : '❌ Failed';
              const issueTitle = `Maven 4 Test Results: ${repo} (${mavenVersion})`;

              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'all',
                labels: 'maven4-testing'
              });

              const body = 
                "# Maven 4 Compatibility Test Report\n\n" +
                `- **Repository**: ${repo}\n` +
                `- **Status**: ${status}\n` +
                `- **Maven Version**: ${mavenVersion}\n` +
                `- **Test Date**: ${new Date().toISOString()}\n` +
                `- **Chunk**: ${chunkNumber}\n\n` +
                "<details>\n" +
                "<summary>Maven Version Info</summary>\n\n" +
                "```\n" +
                mavenOutput + "\n" +
                "```\n" +
                "</details>\n\n" +
                (!buildSuccess ? 
                  "<details>\n" +
                  "<summary>Build Error Details</summary>\n\n" +
                  "```\n" +
                  buildError + "\n" +
                  "```\n" +
                  "</details>\n" 
                  : "");

              const existingIssue = issues.data.find(issue => issue.title === issueTitle);
              let issueNumber;

              if (existingIssue) {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existingIssue.number,
                  body: body,
                  state: 'open',
                  labels: ['maven4-testing', buildSuccess ? 'success' : 'failed']
                });
                issueNumber = existingIssue.number;
              } else {
                const newIssue = await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: issueTitle,
                  body: body,
                  labels: ['maven4-testing', buildSuccess ? 'success' : 'failed']
                });
                issueNumber = newIssue.data.number;
              }

              return { issueNumber, status };
            }

            async function updateSummaryTable(github, context, repo, status, issueNumber, mavenVersion) {
              const summaryTitle = `Maven 4 Compatibility Summary (${mavenVersion})`;
              const summaryIssues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'all',
                labels: 'maven4-summary'
              });

              const existingSummary = summaryIssues.data.find(issue => issue.title === summaryTitle);
              const issueUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/issues/${issueNumber}`;

              // Function to process table update with atomic replacement
              function processTableUpdate(currentBody) {
                const tableHeader = '|Project|Status|Details|\n|---|---|---|';
                const entry = `|${repo}|${status}|[Details](${issueUrl})|`;

                // Parse existing body
                const lines = currentBody.split('\n');
                const tableStartIndex = lines.findIndex(line => line.startsWith('|Project|'));
                const tableEndIndex = lines.findIndex((line, index) => 
                  index > tableStartIndex && line.trim() === '');

                // Keep existing rows except for the current repo
                const existingRows = lines
                  .slice(tableStartIndex + 2, tableEndIndex)
                  .filter(row => !row.startsWith(`|${repo}|`));

                // Reconstruct the table
                const newTable = [
                  tableHeader,
                  ...existingRows,
                  entry
                ].join('\n');

                // Replace the table in the body
                lines.splice(tableStartIndex, tableEndIndex - tableStartIndex, newTable);

                return lines.join('\n');
              }

              // Prepare summary body
              const summaryBody = 
                "# Maven 4 Compatibility Testing Summary\n\n" +
                "Testing with Maven version: " + mavenVersion + "\n" +
                "Last updated: " + new Date().toISOString() + "\n\n" +
                (existingSummary ? processTableUpdate(existingSummary.body) : 
                  '|Project|Status|Details|\n|---|---|---|' + `\n|${repo}|${status}|[Details](${issueUrl})|`);

              // Use GraphQL mutation with clientMutationId for optimistic locking
              const clientMutationId = `maven4-summary-${Date.now()}`;

              try {
                if (existingSummary) {
                  await github.graphql(`
                    mutation UpdateIssue($input: UpdateIssueInput!) {
                      updateIssue(input: $input) {
                        issue {
                          id
                        }
                        clientMutationId
                      }
                    }
                  `, {
                    input: {
                      id: existingSummary.node_id,
                      body: summaryBody,
                      clientMutationId: clientMutationId
                    }
                  });
                } else {
                  await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: summaryTitle,
                    body: summaryBody,
                    labels: ['maven4-summary']
                  });
                }
              } catch (error) {
                console.error('Error updating summary table:', error);
                throw error;
              }
            }

            (async () => {
              const { buildSuccess, mavenOutput, buildError } = await runMavenBuild();
              const repo = '${{ matrix.repository }}';
              const mavenVersion = '${{ github.event.inputs.maven_version }}';
              const chunkNumber = '${{ github.event.inputs.chunk_number }}';

              // Create/update individual project issue
              const { issueNumber, status } = await createOrUpdateIndividualProjectIssue(
                github, context, repo, buildSuccess, mavenOutput, buildError, mavenVersion, chunkNumber
              );

              // Update summary table
              await updateSummaryTable(github, context, repo, status, issueNumber, mavenVersion);
            })();